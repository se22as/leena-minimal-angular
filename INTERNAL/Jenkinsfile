// File: Jenkinsfile

import groovy.transform.Field

@Field def commonBuild
@Field def platformBuild

// ----------------------------------------------------------------------------
// Pipeline step delegates

// Try to put as little logic in this file as possible. Anything that
// can be shared by other jobs should go in a shared script file.
// ----------------------------------------------------------------------------

def doLint() {
    commonBuild.doLint()
    platformBuild.doLint("tslint")
}

def doBuild() {
    commonBuild.doBuild()
    // npm install has been done by platformBuild.doPrepare()
    
    sshagent (credentials: [ GIT_SSH_CREDENTIALS_ID ]) {
	    sh "npm run build:ssr"
    }

    commonBuild.makeDockerImage(true)
}


// ----------------------------------------------------------------------------
// Boilerplate section:
//
// Almost everything below here should be the same for all jobs. Don't add any
// job-specific logic below here but put in the the delegate methods above.
// ----------------------------------------------------------------------------

// Code that must be run in order to call methods in shared processing script(s)
def doBootstrap() {

    SCRIPTS_REPO = "git@git.cec.oraclecorp.com:oce-devx-headless/tutorials.git"
    SCRIPTS_BRANCH = "integration"

    // Assuming Jenkins job has cleaned the workspace when it started
    sh label: "Cloning integration branch", script: """\
        env | sort --ignore-case
        git lfs install
        git clone --depth 1 --branch ${SCRIPTS_BRANCH} ${SCRIPTS_REPO} ${INTEGRATION_DIR}
    """

    stash includes: "*/**", name: "workspace"

    commonBuild = load "${INTEGRATION_DIR}/jenkins/common.groovy"
    platformBuild = commonBuild.loadPlatformScript()
}


pipeline {
    agent {
        label 'oci'
    }
    environment {
        GIT_SSH_CREDENTIALS_ID = "021f7ef4-48b2-4831-a224-7234514c6a5f"

        // After boostrap, the integration branch is available at this path
        INTEGRATION_DIR = "INTERNAL/integration"

        // Decide severity of issues for this job (SUCCESS, UNSTABLE, FAILURE)
        LINT_ISSUES_BUILD_STATUS = "FAILURE"
        BLACKLIST_ISSUES_BUILD_STATUS = "UNSTABLE"
        THIRDPARTY_ISSUES_BUILD_STATUS = "UNSTABLE"

        // Whether to send job-completion notifications (maybe disable while testing scripts)
        EMAIL_ENABLED = "YES"
    }
    stages {
        stage("Bootstrap") {
            steps {
                // No startStage() call -- commonBuild is not initialised yet
                doBootstrap()
            }
        }
        stage("Prepare") {
            steps {
                script {
                    commonBuild.startStage()
                    commonBuild.doPrepare()
                    platformBuild.doPrepare()
                }
            }
        }
        stage("Lint") {
            steps {
                script {
                    commonBuild.startStage()
                    doLint()
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    commonBuild.startStage()
                    doBuild()
                }
            }
        }
        stage("Test") {
            steps {
                script {
                    commonBuild.startStage()
                    commonBuild.doTest()
                    platformBuild.doTest()
                }
            }
        }
        stage("Compliance") {
            steps {
                script {
                    commonBuild.startStage()
                    // More complex interleaving of common and job-specific code
                    commonBuild.doComplianceSetup()
                    platformBuild.doCompliance()
                    commonBuild.doComplianceReport()
                }
            }
        }
        stage("Distributions") {
            stages {
                stage("GitHub") {
                    steps {
                        script {
                            commonBuild.startStage()
                            commonBuild.doGitHub()
                            platformBuild.doGitHub()

                            // Because this is the last stage. Move this if more are added.
                            commonBuild.finishedLastStage()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Caution: this is called even if Bootstrap fails, in which case the build scripts can be null
                commonBuild?.doPostAlways()
                platformBuild?.doPostAlways()
            }
        }
    }  
}

